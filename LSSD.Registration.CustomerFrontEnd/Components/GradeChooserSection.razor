@using LSSD.Registration.CustomerFrontEnd.Services;
@using LSSD.Registration.Model;
@code {
    [Inject]
    LSSD.Registration.CustomerFrontEnd.Services.FormStepTrackerService StepTracker { get; set; }

    [Inject]
    public BrowserStorageService BrowserStorage { get; set; }

    [Inject]
    LSSD.Registration.CustomerFrontEnd.Services.SchoolDataService SchoolRepository { get; set; }

    [Parameter]
    public string FormName { get; set; }

    [Parameter]
    public int StepNumber { get; set; }

    GradeInfo ChosenGrade = new GradeInfo();
    List<string> AvailableGrades = new List<string>();
    School ChosenSchool = null;

    private void OnClick_NextStepButton()
    {
        StepTracker.NextStep(FormName);
    }

    protected void OnClick_PreviousStepButton()
    {
        await saveData();
        StepTracker.PreviousStep(FormName);
    }

    protected override async Task OnInitializedAsync()
    {
        List<School> allSchools = (await SchoolRepository.GetAll()).ToList();
        ChosenGrade = await BrowserStorage.GetOrNew<GradeInfo>(StorageKeys.Grade);
        SelectedSchool chosenSchool = await BrowserStorage.GetOrNew<SelectedSchool>(StorageKeys.School);
        School chosenSchoolRecord = allSchools.Where(x => x.DAN == chosenSchool.DAN).FirstOrDefault();
        if (chosenSchoolRecord != null)
        {
            AvailableGrades = chosenSchoolRecord.GetGradesOffered();
            ChosenSchool = chosenSchoolRecord;
        }

        // Do some basic validation, if they've changed schools around
        if ((chosenSchoolRecord != null) && (ChosenGrade != null))
        {
            // If the current school doesn't offer the current grade, wipe out the grade
            if (!chosenSchoolRecord.GetGradesOffered().Contains(ChosenGrade.Grade))
            {
                ChosenGrade = new GradeInfo();
            }
        }
    }

    private async Task saveForm()
    {
        await BrowserStorage.Set(StorageKeys.Grade, ChosenGrade);
    }

    protected async Task HandleValidSubmit()
    {
        await saveForm();
        StepTracker.NextStep(FormName);
    }

    protected async Task HandleInValidSubmit()
    {
        await saveForm();
    }
}

<div class="container">
    <h2>Grade selection</h2>
    <br />
          <EditForm Model="@ChosenGrade" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInValidSubmit">
              <DataAnnotationsValidator />
              <ValidationSummary />

              @if (ChosenSchool != null)
              {
                  <div class="card">
                      <div class="card-body">
                          <SchoolComponent school="@ChosenSchool"></SchoolComponent>
                      </div>
                  </div>
                  <br />

              }

              <div class="form-group row">
                  <label for="chosenGrade" class="col-sm-3 font-weight-bold">Please choose a grade: </label>
                  <InputSelect id="chosenGrade" class="form-control col-sm-4" @bind-Value="@ChosenGrade.Grade">
                      <option value=""></option>
                      @foreach (string val in AvailableGrades)
                      {
                          <option value="@val">@val</option>
                      }
                  </InputSelect>
              </div>

              <div class="form-group">
                  <div class="form-row">
                      @if (StepNumber > 0)
                      {
                          <div class="col">
                              <button type="button" @onclick="OnClick_PreviousStepButton" class="btn btn-secondary btn-block">Previous Step</button>
                          </div>
                      }
                      <div class="col">
                          <button type="submit" class="btn btn-primary btn-block">Next Step</button>
                      </div>
                  </div>
              </div>

          </EditForm>
</div>