@using LSSD.Registration.Model
@using System.Linq;
@using System.Collections.Generic;
@using LSSD.Registration.CustomerFrontEnd.Services;

@code {
    [Inject]
    LSSD.Registration.CustomerFrontEnd.Services.FormStepTrackerService StepTracker { get; set; }

    [Inject]
    public BrowserStorageService BrowserStorage { get; set; }

    [Parameter]
    public string FormName { get; set; }

    [Parameter]
    public int StepNumber { get; set; }

    SiblingInfo SiblingInfoData = new SiblingInfo();

    protected override async Task OnInitializedAsync()
    {
        SiblingInfoData = await BrowserStorage.GetOrNew<SiblingInfo>(StorageKeys.Siblings);
    }

    protected async Task OnClick_PreviousStepButton()
    {
        await saveData();
        StepTracker.PreviousStep(FormName);
    }

    protected async Task handleValidSubmit()
    {
        await saveData();
        StepTracker.NextStep(FormName);
    }

    protected async Task handleInvalidSubmit()
    {
        await saveData();
    }

    private async Task saveData()
    {
        await BrowserStorage.Set(StorageKeys.Siblings, SiblingInfoData);
    }

    private void addSibling()
    {
        SiblingInfoData.Siblings.Add(new Sibling());
    }

    private void removeSibling(Sibling sibling)
    {
        if (SiblingInfoData.Siblings.Contains(sibling))
        {
            SiblingInfoData.Siblings.Remove(sibling);
        }
    }
}

<div class="container">
    <h2>Siblings</h2>
    <EditForm Model="@SiblingInfoData" OnValidSubmit="@handleValidSubmit" OnInvalidSubmit="@handleInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <p>Siblings are other school-aged children that live with the student, and are enrolled at a school in Saskatchewan (including schools in other school divisions).</p>
        <p>Do not include graduated students or university students.</p>
        <button type="button" class="btn-sm btn-primary" @onclick="addSibling">Add Sibling</button>
        <br />
        <br />

        @if (SiblingInfoData.Siblings.Count > 0)
        {
            @foreach (Sibling Sibling in SiblingInfoData.Siblings)
            {
                <div class="form-group container p-2" style="border: 1px solid #dbdbdb; border-radius: 2px;">
                    <div class="form-row">
                        <label class="col-sm-3 font-weight-normal">First Name: </label>
                        <InputText id="" class="form-control col-sm-6 form-control-sm" @bind-Value="@Sibling.FirstName" placeholder="First"></InputText>
                        <ValidationMessage class="offset-sm-4 col-sm-6" For="@(() => Sibling.FirstName)" />
                    </div>
                    <div class="form-row">
                        <label class="col-sm-3 font-weight-normal">Last Name: </label>
                        <InputText id="" class="form-control col-sm-6 form-control-sm" @bind-Value="@Sibling.LastName" placeholder="Last"></InputText>
                        <ValidationMessage class="offset-sm-4 col-sm-6" For="@(() => Sibling.LastName)" />
                    </div>
                    <div class="form-row">
                        <label class="col-sm-3 font-weight-normal">Date of Birth: </label>
                        <InputDate id="" class="form-control col-sm-6 form-control-sm" @bind-Value="@Sibling.DateOfBirth"></InputDate>
                        <ValidationMessage class="offset-sm-4 col-sm-6" For="@(() => Sibling.DateOfBirth)" />
                    </div>

                    <div class="form-group">
                        <div class="form-row">
                            <label class="col-sm-3 font-weight-normal">School attending: </label>
                            <InputText id="" class="form-control col-sm-6 form-control-sm" @bind-Value="@Sibling.SchoolAttending" placeholder="School Name"></InputText>
                            <ValidationMessage class="offset-sm-4 col-sm-6" For="@(() => Sibling.SchoolAttending)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <button type="button" class="btn-sm btn-link col-sm-1" @onclick="@(() => removeSibling(Sibling))">Remove</button>
                    </div>
                </div>
            }

            <button type="button" class="btn-sm btn-primary" @onclick="addSibling">Add another sibling</button>
        }
        else
        {
            <p><i>No siblings.</i></p>
        }

        <br /><br />
        <div class="form-group">
            <div class="form-row">
                <div class="col">
                    <button type="button" @onclick="OnClick_PreviousStepButton" class="btn btn-secondary btn-block">Previous Step</button>
                </div>
                <div class="col">
                    <button type="submit" class="btn btn-primary btn-block">Next Step</button>
                </div>
            </div>
        </div>
    </EditForm>
</div>