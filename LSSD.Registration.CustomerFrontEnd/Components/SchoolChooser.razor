@using LSSD.Registration.Model
@using System.Linq;
@using LSSD.Registration.CustomerFrontEnd.Services;

@code {
    [Inject]
    LSSD.Registration.CustomerFrontEnd.Services.FormStepTrackerService StepTracker { get; set; }

    [Inject]
    public BrowserStorageService BrowserStorage { get; set; }

    [Inject]
    LSSD.Registration.CustomerFrontEnd.Services.SchoolDataService SchoolRepository { get; set; }

    [Parameter]
    public string FormName { get; set; }

    [Parameter]
    public int StepNumber { get; set; }

    [Parameter]
    public bool? OnlyPreK { get; set; }

    bool schoolAPIReturned = false;
    string chosenCommunity = string.Empty;
    List<School> allSchools = new List<School>();
    Dictionary<string, List<School>> availableSchoolsByCommunity = new Dictionary<string, List<School>>();
    SelectedSchool ChosenSchool = new SelectedSchool();


    protected override async Task OnInitializedAsync()
    {
        loadSchools();
        ChosenSchool = await BrowserStorage.GetOrNew<SelectedSchool>(StorageKeys.School);
    }

    private IEnumerable<School> getSchoolsForCommunity(string Community)
    {
        if (availableSchoolsByCommunity.ContainsKey(Community))
        {
            return availableSchoolsByCommunity[Community].OrderBy(s => s.Name);
        }
        else
        {
            return new List<School>();
        }
    }

    const string allSchoolsCommunityName = "All Schools";
    private Dictionary<string, List<School>> toDictionaryByCommunity(List<School> Schools)
    {
        Dictionary<string, List<School>> returnMe = new Dictionary<string, List<School>>();
        returnMe.Add(allSchoolsCommunityName, new List<School>());

        foreach (School school in Schools)
        {
            if (school.Communities != null)
            {
                foreach (string Community in school.Communities)
                {
                    if (!returnMe.ContainsKey(Community))
                    {
                        returnMe.Add(Community, new List<School>());
                    }
                    returnMe[Community].Add(school);
                }
            }

            returnMe[allSchoolsCommunityName].Add(school);
        }

        return returnMe;
    }

    private async void loadSchools()
    {
        schoolAPIReturned = false;
        allSchools = (await SchoolRepository.GetAll()).ToList();
        if (OnlyPreK == true)
        {
            allSchools = allSchools.Where(s => s.HasGradePK).ToList();
        }
        availableSchoolsByCommunity = toDictionaryByCommunity(allSchools);
        schoolAPIReturned = true;
        StateHasChanged();
    }

    private async void selectSchool(School school)
    {
        await saveData(school);
        StepTracker.NextStep(FormName);
    }

    private async Task saveData(School school)
    {
        await BrowserStorage.Set(StorageKeys.School, new SelectedSchool(school));
    }

    protected void OnClick_PreviousStepButton()
    {
        await saveData();
        StepTracker.PreviousStep(FormName);
    }

}
<h2>School Selection</h2>

<EditForm Model="@ChosenSchool">
    <br />
    @if (!schoolAPIReturned)
    {
        <div class="w-25 row mx-auto">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">...</span>
            </div>
            <div class="h2 px-2">Loading...</div>
        </div>
    }
    else
    {
        if (availableSchoolsByCommunity.Count > 0)
        {
            <div class="form-group row">
                <label for="chosenCommunity" class="col-sm-3 font-weight-bold">Community: </label>
                <InputSelect id="chosenCommunity" class="form-control col-sm-4" @bind-Value="@chosenCommunity">
                    <option value=""></option>
                    @foreach (string val in availableSchoolsByCommunity.Keys.OrderBy(c => c))
                    {
                        <option value="@val">@val</option>
                    }
                </InputSelect>
            </div>

            @foreach (School school in getSchoolsForCommunity(chosenCommunity).OrderBy (s => s.Name))
            {
                <div class="card">
                    <div class="card-body">
                        <div class="form-row">
                            <div class="col-sm-10">
                                <SchoolComponent school="@school"></SchoolComponent>
                            </div>
                            <button type="submit" @onclick="@(() => selectSchool(school))" class="btn btn-primary col-sm-2">Select @school.Name</button>
                        </div>
                    </div>
                </div>
                <br />
            }
        } else
        {
            // No schools returned
            <p>No schools returned!</p>
        }


    }


    <br /><br />

    @if (StepNumber > 0)
    {
        <div class="form-group">
            <div class="form-row">
                <div class="col">
                    <button type="button" @onclick="OnClick_PreviousStepButton" class="btn btn-secondary btn-block">Previous Step</button>
                </div>
            </div>
        </div>
    }

</EditForm>

