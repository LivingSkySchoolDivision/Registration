@using LSSD.Registration.Model
@using System.Linq;
@using LSSD.Registration.CustomerFrontEnd.Services;

@code {
    [Inject]
    LSSD.Registration.CustomerFrontEnd.Services.FormStepTrackerService StepTracker { get; set; }

    [Inject]
    public BrowserStorageService BrowserStorage { get; set; }

    [Inject]
    LSSD.Registration.CustomerFrontEnd.Services.SchoolDataService SchoolRepository { get; set; }

    [Parameter]
    public string FormName { get; set; }

    [Parameter]
    public int StepNumber { get; set; }

    [Parameter]
    public bool? OnlyPreK { get; set; }

    public Dictionary<string, List<School>> availableSchoolsByCommunity = new Dictionary<string, List<School>>();

    SelectedSchool ChosenSchool = new SelectedSchool();

    protected override async Task OnInitializedAsync()
    {
        List<School> allSchools = (await SchoolRepository.GetAll()).ToList();
        if (OnlyPreK == true)
        {
            allSchools = allSchools.Where(s => s.HasGradePK).ToList();
        }
        availableSchoolsByCommunity = toDictionaryByCommunity(allSchools);

        ChosenSchool = await BrowserStorage.GetOrNew<SelectedSchool>(StorageKeys.School);
    }

    private Dictionary<string, List<School>> toDictionaryByCommunity(List<School> Schools)
    {
        Dictionary<string, List<School>> returnMe = new Dictionary<string, List<School>>();

        foreach (School school in Schools)
        {
            if (!returnMe.ContainsKey(school.Community))
            {
                returnMe.Add(school.Community, new List<School>());
            }
            returnMe[school.Community].Add(school);
        }

        return returnMe;
    }

    private async void selectSchool(School school)
    {
        await saveData(school);
        StepTracker.NextStep(FormName);
    }

    private async Task saveData(School school)
    {
        await BrowserStorage.Set(StorageKeys.School, SelectedSchool.FromSchool(school));
    }

    protected void OnClick_PreviousStepButton()
    {
        StepTracker.PreviousStep(FormName);
    }
}
<p>Please select a school:</p>

<EditForm Model="@ChosenSchool">
    <br />
    @foreach (string Community in availableSchoolsByCommunity.Keys.OrderBy(c => c))
    {
        <h3>@Community</h3>
        @foreach (School school in availableSchoolsByCommunity[Community].OrderBy(s => s.Name))
        {
            <div class="card">
                <div class="card-body">
                    <div class="form-row">
                        <div class="col-sm-10">
                            <h4 class="font-weight-bold">@school.Name</h4>
                            <div class="row">
                                <div class="col-sm small">
                                    @school.PhysicalAddress.Line1 <br />
                                    @if (!string.IsNullOrEmpty(school.PhysicalAddress.Line2)) { @school.PhysicalAddress.Line2 <br/> }
                                    @school.PhysicalAddress.City <br/>
                                    @school.PhysicalAddress.Province, @school.PhysicalAddress.Country
                                </div>
                                <div class="col-sm small">
                                    <b>Web:</b> <a href="@school.WebsiteURL" target="_blank">@school.WebsiteURL</a><br />
                                    <b>Ph:</b> @school.PhoneNumber <br />
                                    <b>Email:</b> @school.EmailAddress <br />
                                    <b>Grades:</b> @school.GetGradesOfferedShort()
                                </div>
                                <div class="col-sm small">
                                    @if (!string.IsNullOrEmpty(school.Facebook))
                                    {
                                        <b>Facebook:</b> <a href="@school.WebsiteURL" target="_blank">@school.Facebook</a><br />
                                    }
                                    @if (!string.IsNullOrEmpty(school.Twitter))
                                    {
                                        <b>Twitter:</b> @school.Twitter
                                    }


                                </div>
                            </div>
                        </div>
                        <button type="submit" @onclick="@(() => selectSchool(school))" class="btn btn-primary col-sm-2">Select @school.Name</button>                        
                    </div>
                </div>
            </div>
            <br />
        }
        <br /><br />
    }

    @if (StepNumber > 0)
    {
        <div class="form-group">
            <div class="form-row">
                <div class="col">
                    <button type="button" @onclick="OnClick_PreviousStepButton" class="btn btn-secondary btn-block">Previous Step</button>
                </div>
            </div>
        </div>
    }

</EditForm>

