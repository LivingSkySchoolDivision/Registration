@using LSSD.Registration.Model
@using System.Linq;

@code {
    [Inject]
    LSSD.Registration.CustomerFrontEnd.Services.FormStepTrackerService StepTracker { get; set; }

    [Inject]
    public Microsoft.AspNetCore.ProtectedBrowserStorage.ProtectedLocalStorage Storage { get; set; }

    [Inject]
    LSSD.Registration.CustomerFrontEnd.Services.SchoolDataService SchoolRepository { get; set; }

    [Parameter]
    public string FormName { get; set; }

    [Parameter]
    public int StepNumber { get; set; }

    public List<string> communities = new List<string>();
    public Dictionary<string, List<School>> availableSchoolsByCommunity = new Dictionary<string, List<School>>();

    private const string SectionStorageKey = "REG-SECTION-SCHOOL";
    School Section = new School();

    string selectedCommunity;

    protected async Task OnClick_PreviousStepButton()
    {
        StepTracker.PreviousStep(FormName);
    }


    protected override async Task OnInitializedAsync()
    {
        // Attempt to load a saved section from browser storage.
        // If one doesn't exist, make a new one.
        School LoadedSection = await Storage.GetAsync<School>(SectionStorageKey);
        if (LoadedSection != null)
        {
            Section = LoadedSection;
        }
        else
        {
            await Storage.SetAsync(SectionStorageKey, Section);
        }

        communities = (await SchoolRepository.GetAllCommunities()).ToList();
        availableSchoolsByCommunity = toDictionaryByCommunity((await SchoolRepository.GetAll()).ToList());
    }

    private Dictionary<string, List<School>> toDictionaryByCommunity(List<School> Schools)
    {
        Dictionary<string, List<School>> returnMe = new Dictionary<string, List<School>>();

        foreach (School school in Schools)
        {
            if (!returnMe.ContainsKey(school.Community))
            {
                returnMe.Add(school.Community, new List<School>());
            }
            returnMe[school.Community].Add(school);
        }

        return returnMe;
    }

    private async void selectSchool(School school)
    {
        await Storage.SetAsync(SectionStorageKey, school);
        StepTracker.NextStep(FormName);
    }
}
<h2>School Selection</h2>

@if (communities == null)
{
    <p><em>Loading...</em></p>
}
else
{
<EditForm Model="@Section">
    <label for="selectedCommunity">Please select a community</label>
    <InputSelect @bind-Value="@selectedCommunity" id="selectedCommunity" class="form-control col-sm-8">
        <option></option>
        @foreach (string community in communities)
            {
            <option value="@community">@community</option>
            }
    </InputSelect>

    <br />
    @if (!string.IsNullOrEmpty(selectedCommunity))
    {
        @if (availableSchoolsByCommunity.ContainsKey(selectedCommunity))
        {
            @foreach (School school in availableSchoolsByCommunity[selectedCommunity].OrderBy(s => s.Name))
            {
                <div class="form-group">
                    <h4>@school.Name</h4>
                    <hr />
                    <div class="form-row">
                        <div class="col-sm-4">
                            @school.PhysicalAddress.Line1 <br />
                            @school.PhysicalAddress.Line2
                        </div>
                        <div class="col-sm-6">
                            <a href="@school.WebsiteURL" target="_blank">@school.WebsiteURL</a><br />
                            <b>Ph:</b> @school.PhoneNumber <br />
                            <b>Email:</b> @school.EmailAddress <br />
                            <b>Grades:</b> @school.GradesOffered
                        </div>
                        <button type="submit" @onclick="@(() => selectSchool(school))" class="btn btn-primary col-sm-2">Register</button>
                    </div>
                </div>
                <br/><br/>
            }
        }
    }

    @if (StepNumber > 0)
    {
    <div class="form-group">
        <div class="form-row">
            <div class="col">
                <button type="button" @onclick="OnClick_PreviousStepButton" class="btn btn-secondary btn-block">Previous Step</button>
            </div>
        </div>
    </div>
    }

</EditForm>
}
